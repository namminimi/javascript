자바스크립트 - 동적타입언어
let a = 20
a 타입 number
a = "green"
a 타입 string

기본형(primitive) 타입
number
정수 및 부동소수점 숫자를 나타냄
-2/53-1~ 2/53-1
biglnt
let number1= 2132143254353453453n; n을 붙이면 bigInt 로 변함
string
let str = "a" 큰따옴표
let str = 'a'  작은따옴표
let str = `a`  역따옴표(백틱) 
boolean(논리타입) 긍정이나 부정을 나타내는값
true 긍정/false 부정
null-object
undefined 값은 할당되지 않은 상태

typeof 변수명 :: 어떤 타입인지 나옴


객체형(object) 타입 --------------11/7

기본타입은 한번 참조하고
객체타입은 여러개 있어서 한번 더 참조 함

배열 - 인덱스를 사용해 값을 식별할 수 있는 자료 구조
인덱스 : 배열내에서 순서를 나타냄
*배열 선언하기
let arr = [ ];
let arr = new Array();
let arr = ["키위", "오렌지", "딸기"];

배열 접근
arr[0];

배열에 담긴 요소의 개수
arr.length
---------------------------------------------------------------------

1.입력
prompt("안내글")

2. 형변환 + 연산자 
*number 타입으로 변환하기
number()
parseFloat()

*string 타입으로 변환하기
String()
변수.toString()
변수.toFixed() 소수 자리수 지정 가능
*boolean 타입으로 변환하기
Boolean()
숫자0, 빈문자열, null, undefined, NaN

3.함수



---
let x = 2
x = x + 2;
x += 2;
x = x - 2;
x -= 2;
x = x * 2;
x *= 2;
x = x / 2;
x /=2


let str = "green"

console.log("안녕하세요" + str + "님")
안녕하세요green님

console.log(`안녕하세요 ${str}님`) 역따움표 백틱(`  `)
안녕하세요 green님

형변환
묵시적형변환
number 타입 변환 
Number("123z")
parselnt("zzz") -> NaN  isNaN()
NaN 다른 모든 값과 비교(==, !=,===, !==)했을 때 같지 않다.
다른 NaN과도 같지 안흡니다
parseFloat()

isNaN()
parseFloat()

String()문자열 바꾸기
var.toString(진법)
var.toFixed(소수자리수)

boolean()
false
숫자 0, ""(공백 있으면 true, 없으면 "" false), null, undefined, NaN

연산자
1.산술 연산자
+,-,*,/,%,**

2.증감, 감소연산자
let number = 0
++, --
++number 전위증감연산자
number++후위증감연산자

3. 복합할당(대입)연산자
let a = 10;
a = a + 1;  // a += 1
a = a - 1; // a -= 1

4.비교연산자
A > B 크다
A >= B 크거나 같다
A < B 작다
A <= B 작거나 같다
A == B 값이 같다
A === B 값이 타입이 같다
A != B 값이 같지 않다
A !== B 값과 타입이 같지 않다.

5. 논리 연산자
&&
-true && true > true
-false && true > false
 || 
-true || false > true
 !
!true > false
!false > true

6.삼항연산자
피연산자가 3개인 연산자
a > b ? "맞아요" : "틀려요";

제어문
조건문/반복문

if(표현식) {
	표현식이 true 면 실행
} 

if (표현식) {
	표현식이 true 면 실행
} else {
	표현식이 false면 실행
}

if(표현식1) {
	표현식1이 참이면 실행
} else if (표현식2) {
	표현식1이 거짓이고 표현식2가 참이면 실행
} else {
	표현식1과 표현식 2가 거짓일 때 실행
}

-----------------------------------------------------------------------------------
if (num=="1") {
}else if (num=='2') {
}else{
}

switch(num) {
	case '1':
	실행할 구문;
	break;
	case'2':
	실행할 구문;
	break;
	default:
	  해당하는 case가 없을 때 실행
}

반복문
1. while
while(true) {
	실행
}
let i = 0
while(i<10) {
	console.log(i)
	i++;
	if(i>=11) {
		break;
	}
}



2.do while
do {
	실행문
} while(표현식)

이중 for문
for(let i =0; i < 10; i ++ {
	for(let j=0; j<5; j++) {
		console.log(i);
		console.log(j);
}
3. for(초기값; 조건; 증감) {
	반복할 코드
}




-------------------------------------------------------------------------------------------------------11/7

javascript
1)데이터 타입
기본타입
number
string
bigInt
boolean
null
underfined

2)변수 선언
var, let, const

제어문 
1.조건문
if(조건1) {
            조건1이 true일때 실행
}else if (조건2) {
	조건2가 true일 때 실행
}else {
	조건1도 false고 조건 2도 false일때 실행
}

switch
switch(변수) {
	case 1:
	실행문
	break;
	case 2:
	실행문
	break;
	default;
	실행문
	break;
}

반복문
while (true) {
	실행문
}
let i = 0;
while(i<10) {
	console.log(i)
	i++;
}
do {
	실행문;
}while(조건) 

타입
typeof 변수

입력
prompt()


명시적 형변환
Number 타입으로 변환
Number()
parseInt()
parseFloat()

string타입으로 변환
String()
변수.toString(진수)
변수.toFixed(소수자리)
boolean타입으로 변환
boolean()

3. for(초기값; 조건; 증감) {
	반복할 코드
}

let arr= [1,2,3,4,5]

console.log(arr[0])
console.log(arr[1])
console.log(arr[2])
console.log(arr[3])
console.log(arr[4])

for(let i = 0; i<arr.length; i++) {
	console.log(arr[i])
}

구문

[1,2,3,4,5]
for(변수 of 배열 변수) {
	console.log(변수);
}
for (let i of arr) {
	console.log(i);
}

함수 (기능적인 얘들, 동사)
프로그램으로 작성할 때 반복적으로 수행하는 일을 함수로 만든다.
-서브 프로그램
-프로그램안에서 각각의 기능을 수행함
-input을 받아서 잘 처리한다음 output을 해줌
-변수에 담을 수 도 있고 함수를 리턴할 수도 있다.
기능(딸기와 빵을 빵기계에 넣으면 딸기빵)


함수 선언문

function add(함수이름)(투입구/a, b/매개변수이름(변수/지역변수)) {
	return(output) a(딸기) + b(빵);
}

리턴값없는 함수
function printText(text) {
	console.log(text);
	return undefined;(자스엔(자바스크립트 엔진에서 자동적으로 생략)
}
호출방법 printText("월요일");

함수 표현식
익명 함수
let printText = function(text) {
	console.log(text);
}
호출방법 printText("월요일");

*화살표 함수 (arrow function)
(익명함수 간단하게 나타낸것)

let printText = function(text) {
	console.log(text);
}
function이 화살표로 바뀜/화살표 앞에는 매개변수
let printText = text => {
console.log(text)
}

const add = function(a,b) {
	return a + b;
}
매개변수 하나일때는 괄호 생략가능
return, 중괄호( 생략가능)

const add = (a,b) => a + b;
1) function 키워드 대신 => 키워드 사용
2) 매개변수가 하나일때는 ()생략가능
3) 실행코드가 한줄 일 때 return생략 가능, 중괄호 생략가능

*즉시 실행함수
(function hello()) {
	console.log("hello");
} )

---------------------------------------------------------------------------------------------------11/9
데이터타입
Number
string
null
undefined
bigint

참조형타입
배열
let arr = [];
let arr = [1,2,3,4,5]
arr[2] = 10
length
배열변수.push() 마지막 요소 추가
배열변수.pop() 마지막 요소 제거
배열변수.shift() 맨앞 요소 제거
배열변수.unshift() 맨 앞에 요소 추가
배열변수.forEach(function(value) {    배열 리스트를 한번에 다가져옴
	console.log(value)     배열 리스트를 for에서 출력하는것처럼 출력해줌
		화살표 표식 변경
		배열변수.forEach(value => console.log(value));
})
연산자
1. 산술연산자
+,-,*,/,%,**
2. 대입연산자
let x = 10

3. 할당연산자
x=x + 1 => x += 1
x=x - 1 => x -= 1
x=x * 1 => x *= 1
x=x / 1 => x /= 1
4. 증감연산자
x++
++x
x--
--x
5. 비교연산자
==동등 연산자 ===일치
!= !== 불일치 연산자
a > b
a < b
a >= b
a <= b

6. 논리연산자
&&   ||    !
7. 삼항연산자
조건 ? true : false


함수
1. 함수 선언문
function 함수명(매개변수명) {
	return 값;
}
function add(a, b) {
	return a + b;
}

let result = add(5, 10)
function add(...arr) {  /// 배열 전체 소환
	let result = 0;
	arr.forEach(v -> {
		result = result + v;
     })
}

add(1, 2, 3, 4, 5)

2. 함수표현식
let func = function(매개변수명) {
	return 값;
}

제어문
1. 반복문
for문
for(초기값; 조건; 증감) {
	조건이 true일 때 반복되는 코드;
}

while 문
while (조건) {
	조건이 true면 반복하는 코드
	증감
}
do-while문
do {
	일단 한번 실행 후
	조건을 비교해 true 면 반복하는 코드
} while(조건)

2. 조건문

if문
if(조건식1) {
	조건식 1이 true일때 실행
}
else if 문
else if (조건식2) {
	조건식 1이 false일때 조건식 2가 true일때 실행
}
else 문
else {
	조건식 1, 2, 둘다 false일때
}
switch 문

switch(name) {
	case: "a"
	실행문
	break;
	case: "b"
	실행문
	break;
	case: "c"
	실행문
	break;
	case: "d"
	실행문
	break;
	default:
	실행문;
	break;
}


이벤트
무언가 일어났다는 신호
1. 마우스 이벤트
click : 요소 위에서 마우스를 클릭했을 때
mouseenter : 요소위에 마우스가 있을 때
mouseleave: 요소위에서 마우스가 벗어났을 때
mousemove: 요소위에서 마우스를 움직일 때

2. 이벤트 핸들러
1) html 속성 => on<event>
ex> <button onclick="alert('클릭')">클릭</button>
2) DOM 프로퍼티
<button id = "btnElem">클릭</button>
<script>
	let btn = document.querySelector("button");
	btn.onclick = function() {
			alert("클릭");
	}
</script>
3)addEventListener()사용
object.addEventListener(event, function(){})
<button onclick="btnElem">클릭</button>
<script>
	let btn = document.querySelector("button");
	btn.addEventListener('click', function() {
			alert("클릭");
	})
</script>


classList
자바스크립트를 사용하여 클래스를 변경하기

1) 클래스 추가
object.classList.add("클래스명");
ex) document.querySelector("#box").classList.add("on");

2) 클래스 제거
object.classList.remove("클래스명");
ex> document.querySelector("#box").classList.remove("on");

3) 클래스 추가/제거
object.classList.toggle("클래스명");
클래스명이 존재할 경우 제거 그렇지 않은 경우 추가

4) 클래스명이 있는지 확인
object.classList.contains("클래스명");
클래스명이 있으면 true 없으면 false반환


==========================11/10
javascript
타입
기본타입
Number, string, biging, null, undefined
참조타입
object
배열
배열 인덱스를 사용해 식별할 수 있는 값을 담은 자료 구조

배열 선언, 배열 요소, 인덱스
let arr = [];
let arr = new Array();

let arr = ["a", "b", "c", "d"]

배열의 길이 arr.length
마지막인덱스: 배열길이 -1;
pop/push/shift/unshift
let el = arr.pop(): ["d"]
	["a", "b", "c"]

arr.push



["f", "b", "c", "e"]
arr.unshift("f");

제어문
조건문

반복문
for(초기값; 조건; 증감) {
	
}
for(let i = 0; i <=10; i++) {
	console.log(i)
} 

for of 문
let arr=["a", "b","c","d","e"]
for(let i of arr) {
	console.log(i)
}
forEach(function(){})
arr.forEach(콜백함수// function(value, index, arr) {
	console.log(value); a
	console.log(index); 0
})
포이치 화살표
arr.forEach(()=>{})

콜백함수 풀이
let hi = function() {
	console.log("hi");
}

function myFunc(f) {
	f()
}              
myFyun(hi)

콜백함수!!!!!!!
function 


-----------------------------------------------
math 객체
수학적인 상수와 내장 함수를 가진 객체이다.

1) Math.round(number) 반올림 처리
math.round(5.9); return 6

2) Math.ceil(number) 올림처리
math.ceil(5.6) return 6

3)Math.floor(number) 내림처리
math.floor(5.9) return 5

4)Math.trunc() 정수부분 반환
math.trunc(4.9) return 4

5)Math.sign() 양수인지 음수인지 확인
음수면 -1을 리턴/0이면 0을 리턴 / 양수면 1을 리턴
math.sign(-3)

6)Math.pow() 제곱근 값을 반환
math.pow(2, 3)

7)Math.sqrt() 루트값을 반환
math.sqrt(64)

8) Math.sbs() 양수값으로 반환
math.abs(-100) return 100

9)Math.min() / Math.max() min은 최소값을 반환
max 최대값을 반환
Math.min(12, 10, 2, 4, 5); return 2

10)Math.random() 0보다 크고 1보다 작은 랜덤숫자를 반화냐
Math.floor(math.random()*5+1) 1~5


arr = [a,b,c,d,e]
arr.splice(0,2) 원하는 위치에서 몇개를 뺄거냐
0번에서 2개 제거

arr.splice(1, 1, a, b);
시작하는 인덱스 위치 , 지워야하는 갯수 , 추가하는 아이템


------------------------------------------11/11
제어문
숫자를 입력받았는데 홀수, 짝수
let num = prompt("숫자를 입력하세요")
입력이 하지 않거나 문자를 입력하면
잘못 입력하셨습니다.
num = null => false => true
parseInt(num) => NaN

1. if문
if(!num || isNaN(paresInt(num))) {

} else if (parseInt(num) %2) {

}else {

}

삼항 연산자
let result = num1 > num2 ? "크다" : "작다";

2.switch문
switch(num) {
	case 1:
	console.log("1입니다");
	break;
	case 2:
	console.log("2입니다");
	break;
	case 3:
	console.log("3입니다");
	break;
	default:
	console.log("4입니다");
	break;
}

배열 
let arr =[]
let arr = [1, 2, 3, 4, 5, 6];
arr[2] 
배열의 길이 arr.length
pop() 맨끝의 배열 요소를 삭제하고 반환
push() 맨끝의 배열 요소 추가
shift() 맨앞에 배열 삭제
unshift() 맨앞에 배열 추가
forEach() 배열의 길이만큼 반복하며 배열 요소, 
배열요소의 인덱스, 배열자체를 매개변수로 받을수 있다.
let arr = ["a", "b", "c", "d", "e"]
splice(startindex, num, item)
splice(3, 1, "f", "g") 위치, 제거 갯수, 추가


Math 내장 객체 *만들진 함수(api)
Math.random()
0보다 크고 1보다 작은 소수
0.01231241412~ 0.913410234719284
Math.floor(Math.random() * 5)
0.01231241412~ 4.913410234719284
Math.floor(Math.random() * 5 )+ 1
1~5

function getRndInterger(min, max) {
	return Math.floor(Math.random()*(max-min+1)) + min;
}


getRndInterger(2, 10)
Math.random()*(10-2+1)
Math.random()*9
0~8 + 2
2 ~ 10
--------
배열/문자메서드 비슷
내장 객체

String
length 문자열의 길이
let str = "green";
str.length;   !!!!!!!!!!!!!!!!!!!!!!!! 자주사용
indexof() 특정 문자열 안에 해당문자가 존재하는지 존재하면 시작하는 index를 반환
-1을 반환

let str1 = "안녕하세요 오늘은 금요일 입니다.금요일 입니다."
1. str1.indexOf("금요일"); 앞부터 확인해서 해당문자가 있는지 확인 !!!!!!!!!!!!!!!!!!!!!!!!자주사용

2. str1.lastIndexOf("금요일"); 뒤부터 확인해서 해당문자가 있는지 확인

3. slice(start, end) 문자열에서 해당부분을 반환
let str = "Apple, Banana, Kiwi";
let res = str.slice(7, 13) 마지막은 포함안함 12까지 (빈칸 포함)
str.slice(-1) 끝 쪽

4. substring(start, end) 음수를 허용하지 않음

5. substr(start, num) 시작 위치와 잘라낼 갯수를 파라미터로 받아서 해당부분을 반환

6.replace() 특정문자열을 지정한 문자열 변경(상대방이 욕을 적었을 때 강제로 변경하고싶으면 사용)
바꾸려는 문자열이 여러개있을 경우 처음 발견된 문자열만 변경됨    !!!!!!!!!!!!!!!!자주사용!!

let str = "please visit seoul and seoul!";

let n2 = str.replace(/Seoul/g, "Jeju");   g 글로벌을 적어주면 해당 문자를 다찾아서 바꿔줌 자주사용!!

n2
->"please visit Jeju and Jeju!"  

7. toUpperCase()/ toLowerCase()
대소문자로 변경/소문자로 변경

8. concat()
2개 이상의 문자열을 하나의 문자열로 합치는 함수입니다 **문자열에서 자주 사용안함 배열에서 자주 사용

let text1 = "hello"
let text2 = "word"
let text3 = text1.concat("", text2)
-----> helloword

9. trim() 문자열의 앞, 뒤 공백을 제거하는 함수
let str = "                    hello world            "
->>>>>> '                  hello world           '
str.trim()
'hello world   // 사이 공백은 제거 안됨 앞뒤만

10. padStart(), padEnd() 문자열 앞/뒤로 지정된 길이 만큼 추가하는 함수
let str2 = "5"

str2 = str2.padStart(4,0)
--->'0005'

str2 = str2.padend(10,1)
--->'0005111111111'

11. split() !!!!!!!!!!!! 자주사용함
문자열을 배열로 사용함
특정 구분자를 기준으로 문자열을 분리해서 배열로 반환한다!!!!!!!!

let birth = "1997-06-12";

let arr = birth.split("-")  "-(기준이 되서 나눠줌)"

----->>>>>> ['1997', '06', '12']

eval()  문자열로 된 숫자형 문자열 에서 숫자형으로 변형됨 "3+4"

Array 객체

01) toString 배열안의 모든 문자를 쉼표를 이용해 모두 결합 하나의 문자열
let fruits = ["Banana", "Orange"]
let str = fruits.toString();
"Banana, Orange"

02) join(구분자)

let fruits = ["Banana", "Orange"]
let str = fruits.join("*");
"Banana*Orange"


join() 배열을 문자열로 반환
reverse()
indexOf()
split()
slice(start,end)
sort()
concat()


객체 (object)
기본타입(number, string등등)을 뺀 나머지는 전부 객체타입
let obj1 = { //파이선 사전과 비슷함
	name: "green",   ---> 하나의 구성을 property / 키 name 값 "green"
	age: 30;        // 키 age 값 "30"                            
}
호출방법
obj1.name 또는 obj1["name"]
obj1.age 또는 obj1["age"]
obj1.isJob = true;


객체 리터럴 선언
let obj2 = {}
객체 생성자 선언
let obj3 = new Object();

배열선언과 비슷 
let arr2 = [];
let arr2 = new Array();

find() 배열에서 해당하는 하나의 값을 찾을 시 반환하고 종료
filter() 조건에 해당하는 값을 배열 요소를 새로운 배열로 반환 !!!!!!별**10001000
map() 배열에서 배열요소의 값을 변형해서 새로운 배열로 반환 !!!!!별**10001000

----------------------------------------------------------------------11/14

내장객체 Math
Math.random()
0부터 1보다 작은 수의 실수가 랜덤으로 만들어짐
Math.floor() 내림
0~5숫자를 랜덤하게?
Math.random() * 6
0~6보다 작은수의 실수를 랜덤하게 반환
Math.floor(Math.randon()*6)
0~5까지 정수를 랜덤하게 반환
1~6
Math.floor(Math.random()*6)+1

내장객체 Array메서드
pop()
push()
shift()
unshift()
splice()**
slice(start, end)
indexOf()**
includes()**
forEach() **
find()
filter()
map()**
concat()
join()**
reverse()
sort()
=====================================

Object - key와 value 형태의 데이터 유형
다양한 키 모음과 복잡한 데이터로 저장하는데 사용

* 객체 만들기
obj = {
	key1: value,
	key2: value2
	hasjob: true,
	"likes hobby": true  //이렇게 하지는 않지만 꼭 만들어야할 경우 "내용"
}
obj.key1
obj["key1"]
1)객체 리터럴
let obj1 = {}

2)객체 생성자
let obj1 = new Object();

생성자 함수(붕어빵 틀// 함수도 쉽게 만들기위해 틀을 짜줘야함)
let stu1 = {
	name: "a",
	age: 20,
	score: 60,
}
let stu2 = {
	name: "b",
	age: 22,
	score: 66,
}

function Students(name, age, score) {
	this.name = name;
	this.age = age;
	this.score = score;
}

let stu1 = new Student("a", 22, 60);
let stu2 = new Student("a", 22, 60);

배열과 함께 쓰는 for 
for of 문
for (let i of arr) {
	
}

객체와 함께쓰는 for
for in문
let obj1 = {
	name: "jone",
	age: 30,
	isAdmin: true
}

for (let key of obj1) {
	console.log(abj1[key])
}

in 연산자
"key"in object
console.log("name" in obj1)

===================================
객체
객체의 프로퍼티에 함수를 할당 => 매소드
* 매소드 만들기
let user = {
	name: "green",
	age: 30
}

user.sayHi = function() {  //객체의 프로퍼티안에 있는 함수는 매서드라고함
	console.log("안녕")
}

let user2 = {
	name: "blue",
	age: 27,
	sayHi: function() {
		console.log("hi");
             }
}

let user3 = {
	name: "blue",
	age: 27,
	sayHi() { //위 표기법과 밑에 표기법 동일함
		console.log("hi");
             }
}



read()메소드
total()메소드


Object 내장 객체
내장 메소드
Object.keys(객체)
해당객체의 key를 배열로 반환

let user = {
	name: "a",
	age: 20
}

["name", "age"]
Object.values(객체)
해당객체의 value를 배열로 반환
["a", 20]
Object.entries(객체)
해당객체의 key, value를 배열로 반환
[["name", "a"], ["age", 20]]
[1,2,3,4,5]이때까지는 이런 배ㅕㅇㄹ
[[1,2], [1,3], [1,4]] => 2차원 배열
arr[0][1]

Object.fromEntries(배열)
2차원 배열을 객체타입으로 반환

========================
객체 복사

number, string, bigint, null, boolean, undefined
------------------------------------------------------------------11/15
내장 객체
자바스크립트는 모든객체가 object를 가지고있다
Math- 메소드 가지고있음
Array
Object

객체 만드는방법
1. 객체 리터럴(객체의 값)
let obj = {}
obj.name = "green";
obj.age = 20;
-------
let obj1 = {
	name: "green",
	age: 20,
	sound() {
		console.log("hi)
	}
}


2. 생성자 (많은 몹들을 찍어낼수있게 도와줌)
function Item(name,age) {
	this.name = name;
	this.age = age;
	this.sound = function() {
		console.log("this.name");
	}
 }

3. 객체가 가지고 있는 함수는 메소드

객체용 반복문
객체는 키로 벨유값 접근
배열은 인덱스로 접근
for in문
for (let key in obj1) {
	console.log(obj1[key])
}

this 브라우져 환경 =====> window
obj1.sound()========> obj1


object 내장객체

정적메소드
let obj = {
	name: "구름",
	age: 3,
	color: "white"
}
Object.keys(객체)
["name", "age", "color"] 반환
Object.values(객체)
["구름", "3", "white"] 반환
Object.entries(객체)
[["name", "구름"], ["age", 3], ["color", "white"]]반환
Object.fromEntries(배열);
{
	name: "구름",
	age: 3,
	color: "white"
}
let obj2 = Object.assign({}, obj)

DOM이란?
Document Object Model
웹페이지에 대한 인터페이스
여러 프로그램들이 페이지의 콘텐츠,
구조 스타일을 읽고 조작할 수 있도록
api를 제공
DOM은 nodes와 property 와 method를 가지고 있는 object로 문서를 표현
웹페이지를 자바스크립트 또는 다른 프로그래밍 언어로 연결해서 사용할 수 있도록 해준다.
DOM은 웹페이지의 객체지향표현이며 자바 스크립트  언어를 이용해 DOM을 수정할 수 있다.

1)html요소 선택하기
1.single element
.getElemntById("idname")
.querySelector("css선택자")
2.multiple element
.getElementsByClassName("classname") ==> html컬렉션(유사배열)
.getElementsByTagName("tagname") =>html컬렉션(유사배열)
.querySelectorAll("css선택자") =>노드리스트(유사배열)

2)DOM요소 조회하기/수정하기
el.innerHTML
el.innerHTML = "<h2>안녕하세요</h2>"

3)DOM요소 생성
document.createElement("div") 새요소 만들기
document.createTextNode("text")텍스트 노드 만들기

4)DOM요소 추가하기
parent.appendChild(element) 부모요소의 자식요소로 추가
이미 자식요소가 있을 경우 마지막 자식요소로 추가
parent.insertBefore(el, position) 부모요소의 자식요소로 추가
el - 삽입할 요소
position - 삽입할 위치
parent.children[0] 몇번째에 추가하겠다   //부모의 자식요소노드
firstElementChild  첫번째 자식 추가       // 첫번째 자식 요소노드
lastElementChild 마지막 자식에 추가      // 마지막 자식 요소 노드
el.nextElementSibling           element 다음요소노드
el.PreviousElementSibling      element 이전요소노드
parent.insertAdjacentHTML(position, el)/ Text/ Element(where, html)
afterbegin
afterend
beforebegin
beforeend

위치
-beforebegin
<ul>
-afterbegin
	<li>list1</li>
	<li>list2</li>
	<li>list3</li>
-beforeend
</ul>
afterend
ol.insertAdjacentHTML(afterbegin, "<p>ddd</p>")

5)DOM 삭제하기 
node.remove() node삭제
node.removeChild(자식노드) 자식노드 삭제

6)DOM 복제하기
elem.cloneNode(true/false)
<ul>
	<li></li>
</ul>

ul li 통째로 복사하고싶은면 true
ul 안에 li빼고 복제하고싶으면 false

------------------------------------------------------------------------11/16
자바스크립트 DOM요소 제어하기
1)DOM 수정하기
el.innerHTML => 태그를 포함하여 수정
el.innerTEXT => 글자만 수정

2)DOM요소 생성
document.createElement('div') 새요소 생성
document.createTextNode('내용') 텍스트 노드
만들기

3)만들어진 요소를 DOM추가하기
parent.appendChild(el)
parent.insertBefore(el, position)
node.append(노드나 문자열) - node끝에 삽입
node.prepend(노드나 문자열) - node 맨앞에 삽입
node.before(노드나 문자열) - node이전에 삽입
node.after(노드나 문자열) - node 다음에 삽입
insertAdjacentHTML/Text/Element(where, html)
beforebegin - elem 바로앞에 삽입
afterbegin    - 첫번째 자식요소 앞에 삽입	
beforeend    - 마지막 자식요소 다음에 삽입
afterend      - elem 바로 다음에 삽입

4) 노드 삭제하기
node.remove()
parent.removeChild(child)
5) 노드 선택하기
children 자식요소노드 선택
lastElementChild 자식요소중 마지막 요소선택
firstElementChild 자식요소중 첫번째 요소 선택
parentElement 부모요소 선택
nextElementSibling 다음 요소 선택
previousElementSibling 이전 요소 선택


자바스크립트 비동기
setTimeout(f, time)
1번만 함수 실행
setInterval(f, time)
시간이 지날 때 마다 함수 실행

----------------------------------------------------------------------11/17

let timer = setInterval(function(){},time)  (변수선언 해주고 clearInterver에 입력)
1000 => 1초  ///while문 (true)와 비슷한 기능
clearIntervar(timer) 정지시켜주는 기능
setTimeout(function(){},time)

click / mousemove / mouseenter/ mouseleave / scroll
input => input요소에 값을 입력하면 발생되는 이벤트

input.addEventListener("input", function() {
	console.log(input.value);
})

================================11/23
document.forms.폼네임.요소네임
폼관련 이벤트
input이벤트
change이벤트
폼관련 속성
checked true값이면 체크 false면 체크해지

focus, submit 이벤트
포커스 커서 옴겨가는 곳

======================================11/24
Data 객체와 날짜
날짜를 저장할 수 있고 날짜과 관련된 메소드를 제공해주는 내장객체임

객체생성하기
new Date(milliseconds)/new Date("2022-02-06")

new Date()
new Date(milliseconds)
new Date("2022-02-06")
new Date(year, month, date, hours, minutes, seconds, ms)
*year, month만 필수 입력, 나머지는 선택입력
*year는 반드시 네자리 숫자여야함 ex(1998)
*month 0(1월)~11(12월) 사이의 숫자여야함
*date는 일을 나타내는데, 값이 없는 경우 1일로 처리
*hours, minutes, seconds, ms에 값이 없는 경우 0으로 처리

new Date() => 현재 날짜와 시간이 저장된 객체가 반환됨

객체가 반환됨
new Date(0) => 1970년 1월 1일 0시 0분 0초
new Date(1000) => 1970년 1월 1일 0시 0분 1초

밀리초 => 초
밀리초 / 1000

밀리초 => 하루
하루 24시간
1시간 60분
1분 60초
1초 1000밀리초
밀리초 / 1000 * 60 * 60 * 24

setDate()
let someDay = new Date(2022, 10, 12); // 2022-11-12
someDay.setDate(20); 이 날짜로 바뀜 // 2022-11-20


커스텀 속성 dataset
data-key="data" data-value="50"
<div id="" class=key: 'date', value: '50'>
dataset => {key: 'date', value: '50'}
dataset.key => date
dataset.value => 50

new Date() => 현재 날짜와 시간을 가진 날짜 객체
new Date("2022-10-22")해당하는 날짜와 시간을 가진 날짜 객체
new Date(300000) 1970년 1월 1일 기준으로 300000밀리초 지난 날짜와
시간을 가진 날짜 객체를 생성
new Date(0) 1970년 1월 1일의 skfWk rorcp
new Date(2022, 10, 26) 2022년 10월 26일 날짜 객체 0~11

let today = new Date();
today.getFullYear();
today.getMonth()+1;
today.get

=======================================11/25

구조분해할당
객체와 배열

*배열의 요소를 직접 변수에 할당하는 것보다 코드를 줄일 수 있습니다.
* , 를 사용하면 필요하지 않는 배열 요소는 제외시킬수 있습니다.
*...스트레드 구문을 사용하여 나머지 요소들을 배열로 받을 수 있다.
*할당할 값이 없을때 기본값을 설정할 수 있음
let fruits = ["사과", "딸기", "바나나"]
let fruit1 = fruits[0];
let fruit2 = fruits[1];
let fruit3 = fruits[2];
let [fruit1, fruit2, fruit3] = fruits;

let str1 = "green"
let str2 = "blue"
str1에 blue str2에 green
[str1, str2] = [str2, str1]
스프레드 구문 ...(점3개를 사용함)
나머지 요소를 가져오기
let newArr = ["a", "b", "c", "d", "e", "f", "g" ];
let [str1, str2, str3,....str4] = newArr; //나머지 배열 요소를 받아줌
str4["d", "e", "f", "g",]

let [name = "green", hobby = "study"] = ["blue"]

객체 구조 분해 할당 
let {name, age} = {name: "a", age: 30}
let student = {
	name: "green"
	age: 20,
	hasJob: true
}

let {name, age, hasJob} = student;
{객체 keyname: 변수이름}
let {name: n, hasJob: job , age} = student;
let obj = {title: "green", height:}
let {title, ...rest} = obj;

함수 매개변수
let options = {
	title: "MyTitle"
	items: ["item1", "item2"]
}
function showMenu({title, items}) {
	console.log(title)
	console.log(items)
}

showMenu(options.title

데이터베이스 => 테이블 => 회원의 레코드
let passwordCh = data.password

/.////
Set 중복을 허용하지 않는 값을 모아놓은 특별한 컬랙션
1)new Set() => set을 생성
2)set.add(value) => 값을 추가
3)set.delete(value) => 값을 제거
4)set.has(value) => set내에 값이 존재하면 true리턴, 존재하지 않으면
false리턴
5)setclear() => set을 배움
6)set.size => set요소의 개수

스크롤 이벤트
1) 스크롤값 반환 document.documentElement.scrollTop;
2) document.addEvnetListener("scroll", function(){
	스크롤 될때 동작하는 코드
}
3)스크롤 위치 이동
window.scrollTo({top: 200, behavior: "smooth"})


마우스 무브 이벤트
obj.addEventListener("mousemove",function(e) {
	e.pageX
	e.pageY
}

다음시간~
BOM
비동기 promise
jsom 통신용데이터 타입
fetch
module
자바스크립트 class
캔버스

==================================================11/30
promise
class
localstorage
cookie

class??? es6 추가된 문법
객체
person1 = {
	name: "green",
	age: 20,
}

person1.name
person1["name"]

생성자 함수 - 붕어빵틀
객체를 만들기 위한 설계도
객체의 탬플릿

function Person(name, age, hasJob) {
	this.name = name;
	this.age = age;
	this.hasJob = hasJob;
}

let person2 = new Person("blue", 20, true); // new라는 키워드를 만들면 실행됨

class Person {
	//생성자
	constructor(name, age, hasJob) {
		this.name = name;
		this.age = age;
		this.hasJob = hasJob;
	}
	speak() {
		console.log("hello");
	}
	eat() {
		console.log("먹는다");
	}
}

let person3 = new Person("aaa", 30, false);

클래스 상속
"extends" 키워드
class Animal {
	constructor(name) {
		this.name = name;
		this.speed = 0;
	}
	run(speed) {
		this.speed = speed;
		console.log(`${this.name}은
		 속도 ${this.speed}로 달립니다.`)
	}
}

let animal = new Animal("동물");   {name: "동물", speed : 0}


=====================================================
XMLHttpRequest
fetch API
fetch("경로")
.then()
.then()

Promise
비동기를 간편하게 처리할 수 있도록 도와주는 오브젝트
정해진 기간의 기능을 수행하고나면 정상적으로 기능이 수행되면
성공의 메시지와 결과값을 전달하고
기능을 수행하다가 예상치 못한 결과가 생겼다면 에러를 전달한다
자바스크립트의 클래스이다

state(상태)
promise가 수행중이면 pending 상태임
promise가 수행이 종료되면 fullfilled가됨
promise가 수행중 오류가 발생하면 reject

2가지로 나눠짐
프로듀서: 프로미스를 만들어서 제공하는 쪽
생성자  const promise = new Promise((resolve, reject)=>{
			resolve() //성공수행
			reject() //성공실패수행
});
컨슈머: 프로미스의 결과를 사용하는 쪽

자바스크립트
const.log("aaa")
서버에서 이미지를 다운받아죠 // 언제받아질지 모름 // 비동기작업은 프로미스한테 맡기고 다음작업 시작
console.log("안녕하세요");

async/await 구문



======================================================12/1
Promise
프로듀서
let promise = new Promise(콜백함수)
new Promise((resolve, reject)=> {
	if(성공){resolve(data);}
	else{reject(error)}
})
state - pending => resolve가 호출 되면 fulfiled
		reject가 호출되면 rejected

result - undefined => resolve가 호출되면 value
		    reject호출되면 error
소비자
then, catch, finally
then()메소드
promise.then(
	function(){}, //결과(result)를 다룹니다.
	function(){} //에러(error)를 다룹니다.
)
ex>
let promise = new Promise((resolve, reject) => {
	setTimeout(()=> resolve("완료"), 1000)
})

promise.then((result)=> console.log(result)
.catch((error)=>console.log(error))
.finally(()=>{
	console.log("끝났어요")
})
async
await
프로미스 더 편하게 사용할 수 있다!!!!!
async function myFun() {
	return Promise.resolve("안녕")
}
myFun().then(result=>console.log(result));

async function myFatch(){
	let promise = new Promise((resolve, reject)=>{
		setTimeout(()=>resolve("완료"),1000)
	})
	let result = await promise; //프로미스가 이행될 때까지 기다림
}
fetch("경로")
.then(result=>result.json())
.then(data=>console.log(data));

async function fetchFun(){
	try{
		let result = await fetch("경로");
		let data = await result.json();
		console.log(data);
	}
	catch(err){
		console.log(err);
	}
}
		
클래스
객체지향프로그래밍에서 틀정객체를 생성하기 위해
변수와 메소드를 정의하는 일종의 틀이다.
객체를 정의하기 위한 상태(멤버변수)와 메소드(함수)로 구성된다
템플릿
붕어빵틀

class Student {
	//생성자-객체의 초기화
	constructor(name, score1, score2) {
		this.name = name;
		this.score1 = score1;
		this.score2 = score2;
	}
	//메소드 정의
	sayHi(){
		console.log(this.name);
	}
}
let stu1 = new Student("김그린", 60, 80);
let stu2 = new Student("김블루", 70, 80);




클래스 상속
정의된 클래스를 상속 받아서 새로운 클래스를 생성할 수 있음
상속 받은 부모에 해당하는 클래스에 정의된 변수, 함수 등
모든특성을 그대로 상속 받아 사용할 수 있음
자식에 해당하는 클래스에서 추가적이 부분만 정의하면됨
extends  => class childClass extends Parent {}
super => 부모요소 클래스



======================
에러 핸들링
try....catch
try{
	//code(코드에서 에러가 발생했다)

}
catch(err){
	//발생한 에러를 캐치에서 잡아줌
}
코드실행이 멈추지않고 계속 진행하면서 에러를 잡아줌(콘솔을 자주쓰는게 좋을듯)

*****자바스크립트 모듈
모듈은 코드를 관리하는 가장 작은 단위
모듈을 이용하면 코드관리와 재활용이 편리해짐
es6부터 import, export문이 추가됨
자바스크립트 파일을 분리하고 사용하는 기술
export 내보내기

export 지시자를 변수나 함수앞에 붙이면 다른 외부 모듈에서 해당 변수나 함수를 
import해서 사용할 수 있음.

import 불러오기
import 지시자를 붙이면 다른 외부 모듈을 가지고 와서 사용할 수 있습니다.

//////////
state_class 파일 예시
newState = {members:["member1", "member2", "member3"]
let state = {
	isLogin : false,
	members : ["member1", "member2"]
	selectMember : {
		name: "김그린",
		age: 30
	}
newState()
}


////
export default
기본 내보내기 1개의 클래스, 1개의 함수

export default class App {

}

import App from "경로.js"


<div id="app">
	<div id="insertTodo"></div>
	<div id="listTodos"></div>
</div>


캔버스

========================================================12/2
call, apply, bind
this
그냥 this = window

let user = {
	name: "green",
	age: 30,
	printName: function(){
		console.log(this.name)
	}
}
user.printName()
객체 this = user (앞에보이는거)  메소드로 사용될때만 
////
function printName(){
	console.log(this);  //window
	console.log(this.name)  //undefind
}

call
모든 함수에서 사용할수 있고 this를 특정 값으로 지정할 수 있다.
function objUpdate(name, age){
	this.name = name;
	this.age = age;
}
let student1 = {
	name: "aa"
}
objUpdate.call(student1, "green", 30)

apply
함수 매개변수를 처리하는 방법을 제외하면 call과 동일하다
apply매개변수를 배열로 받는다!!!!
updateObj.call(stu, "aa", 30)
updateObj.apply(stu,["aa",30]

bind
this값을 영구적으로 변경한다.  앞에있는 함수를 사용할때 지정하는거
updateObj.bind(a)

1.App class
app = {
	state
}

2.TodoHeader class


Component
constructor(target, props) {
	this.target = target;
	this.props = props;
	this.setup()
	this.render()
	this.setEvent()
}

<div id="insertTodo"></div>
<div id="listTodos"></div>

App클래스를 사용해
생성한 객체
{
            target:document.querySelector("#app")
            state = {
                    inputText: "",
                    todoLists : [
                      {  
                         no:1,
                         content: '할일1',
                         isDone: false
                       },
                     {
                        no:2,
                        content: '할일2',
                        isDone: false
                      },
                    {
                        no:3,
                        content: '할일3',
                        isDone: false
                     }
                 ]
        }
}

App class
addTodoList() {
	this
}

this =>app
TodoHeader
addTodoList(){
	this
}

this => TodoHeader




============================12/05
자바스크립트 컴포넌트
화면 구성을 각각 컴포넌트로 구성
1) 컴포넌트 구성
-입력받는 컴포넌트 ContentInut.js
-항목 나타내는 컴포넌트 Lists.js
-이벤트 버튼 컴포넌트 ViewBtn.js
2)
폴더 inputComponent
파일 index.html
폴더 src(소스폴더)
      Main.js
      App.js
      Components
	ContentInput.js
	List.js
	ViewBtn.js

모듈
1)내보내기
export default

2)모듈 사용하기
import 이름 from 파일이름.js


============================ 
캔버스 도형 그리기
*사각형 그리기
1) fillRect(x, y, width, height)
색칠된 사각형 그리기

2) strokeRect(x, y, width, height)
윤곽선으로만 사각형 그리기

3) clearRect(x, y, width, height)

*경로 그리기
1)beginPath() 새로운 경로를 만들기
2)closePath() 도형 닫기(현재 점위치와 
시작점 위치를 직선으로 이어줌
3)stroke() 윤곽선을 이용해 도형 그리기
4)fill()경로의 내부를 채워서
내부가 채워진 도형 그리기
5)moveTo()
6)lineTo()

*호그리기 1)arc(x, y,반지름, 시작각도, 끝각도방향)

Math. PI * 2 360도
라디안 각도
1rad = 180 / PI
1도 = PI /180 rad

PI = 180도
2*PI = 360도

====================================12/6
canvas
html의 canvas요소
<canvas></canvas>
-width와 height 설정(300px* 150px)


javascript - getContext()메소드
캔버스 드로잉 컨텍스트를 반환해주는 메소드
드로잉에 필요한 함수와 속성을 가진 객체를 생성
매개변수 2d(2d), webgl(3d)

ex>
let canvas = document.querySelector("canvas")
let ctx = canvas.getContext("2d") //2d매개변수를 리턴해줌

3)속성
-fill: 경로의 내부를 채워서 내부가 채워진 도형을 그림
-fillRect(x, y, width, height): 색칠된 사각형을 그림
-fillStyle:도형에 채울 때 사용되는 색상지정
ex)fillStyle = "#fff", fillStyle="red"
-stroke: 윤곽선을 이용하여 도형을 그림
-strokeRect(x,y,width,height)윤곽선으로 사각형을 그림
-strokeStyle : 윤곽선을 그릴때 사용되는 색상지정
-clearRect(x,y,width,height) 지정된 사각형 영역을 지움
-beginPath(): 새로운 경로를 시작(펜툴선택)
-closePath(): 시작 부분과 연결된 직선을 추가
(끝지점과 시작지점을 이어짐)
-moveTo(x,y) : 펜을 지정된 좌표로 이동
-lineTo(x,y) : 현재 드로잉 위치에서 지정된 선을 그림
-arc(x,y,radius,시작각,끝나는각, 시계방향)
라디안각 Math.pI =>180 /  2*Math.PI =>360
각도 * Math.PI/180 =>라디안각


애니메이션
setTimeout : 일정 시간이 지나면 해당함수를 실행
setInterval : 일정 시간마다 해당 함수를 실행
requestAnimationFrame: 브라우저에게 애니메이션을 실행하도록 요청,
재귀 호출을 사용해서 반복

재귀함수
모니터 주사율에 맞추어 함수가 호출됨
60hz사용하는 모니터는 초당 60frame호출
144hz 사용하는 모니터는 초당 144frame호출


함수내에서 다시 자기 자신을 부르는 함수
function recurisionFunc(){
	.
	.
	.
	recurisionFunc();

}



4) canvas에 이미지 적용
ex>const imgElem = new Image(); 이미지 객체 생성
	//imgElem 태그라고 생각하면 됨
-이미지 객체 경로지정
ex> imgElem.src = "./images/img.jpg";
-캔버스에 그리기
drawImage(img,  x, y)
drawImage(img, x, y, width, height)


5) text작성
- font : 폰트 스타일 지정
ex> ctx.font = "48px serif"
- filltext(text, x, y) 속이찬 글자를 작성

ex> ctx.filltext("Hello Canvas", 10, 50)
- strokeText(text, x, y) 선으로 된 글자를 작성

6) 상태의 저장과 복원
- save() canvas의 상태를 저장
-restore() 가장 최근에 저장된 canvas상태를 복원


7) 변형 메소드
translate(x, y) 위치이동

ctx.translate(50, 50)
ctx.fillRect(0,0,25,25)

변수 = setInterval
====================================12/9
브라우저 저장소
1.쿠키
브라우저에 저장되는 작은 크기의 문자열
*로그인에 사용
1)document.cookie 속성
:쿠키가 브라우저에 저장되어 있는지 확인
ex>document.cookie = "user = green";
이름이 user쿠키의 값을 변경
2)setCookie("이름", "값", "시간");
2. 로컬 스토리지
-브라우져를 다시 실행해도 저장됨
-localStorage.setltem(key,value): 키: 값 형태로 보관됨 // 입력
value에 자바스크립트 개체, 배열을 저장할때는 문자열로 직렬화후
저장해야 한다. JSON.stringify(obj)
-localStorage.getltem(key): 키에 해당하는 값이 접근 // 받아오는거
담긴 값이 배열이나 객체 문자열이라면 다시 객체화해서 사용해야한다.
JSON.parse(data)
-localStorage.removeltem(key):키와 해당하는 값을 삭제 // 삭제
-localStorage.clear(): 모든것을 삭제함
-localStorage.length : 저장된 항목의 갯수를 얻음

Object.keys() = key값이 담긴 배열 리턴
object.values() = value 가 담긴 배열 리턴
object.entries() = [[key, value], [key,value]]리턴

3. 세션스토리지
브라우저 창을 닫는 순간 자동으로 삭제됩니다.
일회성 데이터를 보관하여 사용
- 사용자 정보중 세션을 유지하는 동안에만 참조할 데이터 저장
- 화면 이동시 전달해야할 파라미터가 많은 경우 저장
sessionStorage.setItem("title", "green");
sessionStorage.getItem("title")
sessionStorage.removeItem("title")

===================================================================================12/14
BOM Browser Object Model
브라우져 객체 모델
Window
DOM BOM Javascript

BOM
navigator 사용자의 브라우져와 운영체제 정보를 제공하는 객체
navigator.appCodeName 방문자 브라우져 코드명을 반환
navigator.appName 방문자의 브라우져 이름을 반환
navigator.appVersion 방문자의 브라우져 버전 정보를 반환
navigator.language 방문자의 브라우져 사용언어를 반환
navigator.userAgent 방문자의 브라우져와 운영체제 종합 정보를 제공
navigator.platform 방문자의 브라우져를 실행하는 운영체제를 반환
navigator.product 방문자의 브라우져 사용 엔진 이름 반환
---------------
history 사용자가 방문한 사이트와 다음 방문한 사이트로 다시 돌아 갈 수 있는 속성과 메소드를 제공

history.length 방문기록에 저장된 목록의 갯수를 반환
history.back() 이전 방문한 페이지로 이동
history.forward() 다음 방문한 페이지로 이동
history.go(-2) 2단계 이전페이지로 이동


-------------
location 브라우져 주소창에 url에 대한 정보와 새로고침 기능을 제공 
도메인) http://www.example.com:8080/search?q=devmo#test
location.host  url의 도메인과 포트 반환  www.example.com:8080
location.hostname url의 도메인을 반환 www.example.com
location.href url을 반환 http://www.example.com:8080/search?q=devmo#test
location.pathname url경로 반환 /search
location.port 포트반환 8080
location.protocal 프로토콜 반환 http:
location.search url에 붙은 매개변수 반환(?뒤의값)?q=devmo
location.hash 주소 값에 붙어있는 anchor값 반환#test

location.reload() 현재 페이지 새로고침
location.replace("url") 새로운 주소이동 (ex 콘솔창에 location.replace(url("naver.com"))치면 사이트 이동)
location.assign(url) 새로운 주소 이동

*새로운 페이지 이동하기
location.assign(url("naver.com"))
location.replace(url("naver.com"))
window.location = url("naver.com")

ex)  2초뒤에 사이트 이동
setTimeout(function(){
    location.assign(url("naver.com"))
}, 2000)



XMLHttpReqauest


